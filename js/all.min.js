"use strict";window.addEventListener("load",function(){function e(e){var t=e.value;if(n(t)){e.style.borderColor="black";var r=document.querySelector("#gacode");r.textContent=p(t),Prism.highlightElement(r)}else e.style.borderColor="red"}function n(e){for(var n=0;n<e.length;n++)if((e.match(new RegExp(e[n],"g"))||[]).length>1)return!1;return!0}function p(e){var n="<script>\n  (function(_params){_p0['GoogleAnalyticsObject']=_p4;_p0[_p4]=_p0[_p4]||function(){\n  (_p0[_p4].q=_p0[_p4].q||[]).push(arguments)},_p0[_p4].l=1*new Date();_p5=_p1.createElement(_p2),\n  _p6=_p1.getElementsByTagName(_p2)[0];_p5.async=1;_p5.src=_p3;_p6.parentNode.insertBefore(_p5,_p6)\n  })(_args);\n\n  ga('create', 'UA-XXXXXXXX-X', 'auto');\n  ga('send', 'pageview');\n\n</script>",p=["window","document","'script'","'//www.google-analytics.com/analytics.js'","'ga'"];return n=0==e.length?n.replace(/_p0/g,p[0]):n.replace(/_p0/g,e[0]),n=e.length<=1?n.replace(/_p1/g,p[1]):n.replace(/_p1/g,e[1]),n=e.length<=2?n.replace(/_p2/g,p[2]):n.replace(/_p2/g,e[2]),n=e.length<=3?n.replace(/_p3/g,p[3]):n.replace(/_p3/g,e[3]),n=e.length<=4?n.replace(/_p4/g,p[4]):n.replace(/_p4/g,e[4]),n=e.length<=5?n.replace(/_p5/g,"a"):n.replace(/_p5/g,e[5]),n=e.length<=6?n.replace(/_p6/g,"b"):n.replace(/_p6/g,e[6]),e.length<5&&(p=p.slice(0,p.length-(5-e.length))),n=n.replace(/_args/g,p.join(",")),n=n.replace(/_params/g,e.split("").join(","))}var t=document.querySelector("#text");e(t),t.addEventListener("input",function(n){e(n.target)})});
var _self="undefined"!=typeof window?window:"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope?self:{},Prism=function(){var e=/\blang(?:uage)?-(\w+)\b/i,t=0,n=_self.Prism={util:{encode:function(e){return e instanceof a?new a(e.type,n.util.encode(e.content),e.alias):"Array"===n.util.type(e)?e.map(n.util.encode):e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/\u00a0/g," ")},type:function(e){return Object.prototype.toString.call(e).match(/\[object (\w+)\]/)[1]},objId:function(e){return e.__id||Object.defineProperty(e,"__id",{value:++t}),e.__id},clone:function(e){var t=n.util.type(e);switch(t){case"Object":var a={};for(var r in e)e.hasOwnProperty(r)&&(a[r]=n.util.clone(e[r]));return a;case"Array":return e.map&&e.map(function(e){return n.util.clone(e)})}return e}},languages:{extend:function(e,t){var a=n.util.clone(n.languages[e]);for(var r in t)a[r]=t[r];return a},insertBefore:function(e,t,a,r){r=r||n.languages;var i=r[e];if(2==arguments.length){a=arguments[1];for(var l in a)a.hasOwnProperty(l)&&(i[l]=a[l]);return i}var s={};for(var o in i)if(i.hasOwnProperty(o)){if(o==t)for(var l in a)a.hasOwnProperty(l)&&(s[l]=a[l]);s[o]=i[o]}return n.languages.DFS(n.languages,function(t,n){n===r[e]&&t!=e&&(this[t]=s)}),r[e]=s},DFS:function(e,t,a,r){r=r||{};for(var i in e)e.hasOwnProperty(i)&&(t.call(e,i,e[i],a||i),"Object"!==n.util.type(e[i])||r[n.util.objId(e[i])]?"Array"!==n.util.type(e[i])||r[n.util.objId(e[i])]||(r[n.util.objId(e[i])]=!0,n.languages.DFS(e[i],t,i,r)):(r[n.util.objId(e[i])]=!0,n.languages.DFS(e[i],t,null,r)))}},plugins:{},highlightAll:function(e,t){var a={callback:t,selector:'code[class*="language-"], [class*="language-"] code, code[class*="lang-"], [class*="lang-"] code'};n.hooks.run("before-highlightall",a);for(var r,i=a.elements||document.querySelectorAll(a.selector),l=0;r=i[l++];)n.highlightElement(r,e===!0,a.callback)},highlightElement:function(t,a,r){for(var i,l,s=t;s&&!e.test(s.className);)s=s.parentNode;s&&(i=(s.className.match(e)||[,""])[1],l=n.languages[i]),t.className=t.className.replace(e,"").replace(/\s+/g," ")+" language-"+i,s=t.parentNode,/pre/i.test(s.nodeName)&&(s.className=s.className.replace(e,"").replace(/\s+/g," ")+" language-"+i);var o=t.textContent,c={element:t,language:i,grammar:l,code:o};if(!o||!l)return void n.hooks.run("complete",c);if(n.hooks.run("before-highlight",c),a&&_self.Worker){var u=new Worker(n.filename);u.onmessage=function(e){c.highlightedCode=e.data,n.hooks.run("before-insert",c),c.element.innerHTML=c.highlightedCode,r&&r.call(c.element),n.hooks.run("after-highlight",c),n.hooks.run("complete",c)},u.postMessage(JSON.stringify({language:c.language,code:c.code,immediateClose:!0}))}else c.highlightedCode=n.highlight(c.code,c.grammar,c.language),n.hooks.run("before-insert",c),c.element.innerHTML=c.highlightedCode,r&&r.call(t),n.hooks.run("after-highlight",c),n.hooks.run("complete",c)},highlight:function(e,t,r){var i=n.tokenize(e,t);return a.stringify(n.util.encode(i),r)},tokenize:function(e,t,a){var r=n.Token,i=[e],l=t.rest;if(l){for(var s in l)t[s]=l[s];delete t.rest}e:for(var s in t)if(t.hasOwnProperty(s)&&t[s]){var o=t[s];o="Array"===n.util.type(o)?o:[o];for(var c=0;c<o.length;++c){var u=o[c],g=u.inside,f=!!u.lookbehind,d=!!u.greedy,p=0,h=u.alias;u=u.pattern||u;for(var m=0;m<i.length;m++){var y=i[m];if(i.length>e.length)break e;if(!(y instanceof r)){u.lastIndex=0;var v=u.exec(y),b=1;if(!v&&d&&m!=i.length-1){var k=i[m+1].matchedStr||i[m+1],w=y+k;if(m<i.length-2&&(w+=i[m+2].matchedStr||i[m+2]),u.lastIndex=0,v=u.exec(w),!v)continue;var P=v.index+(f?v[1].length:0);if(P>=y.length)continue;var _=v.index+v[0].length,j=y.length+k.length;b=3,j>=_&&(b=2,w=w.slice(0,j)),y=w}if(v){f&&(p=v[1].length);var P=v.index+p,v=v[0].slice(p),_=P+v.length,x=y.slice(0,P),A=y.slice(_),S=[m,b];x&&S.push(x);var N=new r(s,g?n.tokenize(v,g):v,h,v);S.push(N),A&&S.push(A),Array.prototype.splice.apply(i,S)}}}}}return i},hooks:{all:{},add:function(e,t){var a=n.hooks.all;a[e]=a[e]||[],a[e].push(t)},run:function(e,t){var a=n.hooks.all[e];if(a&&a.length)for(var r,i=0;r=a[i++];)r(t)}}},a=n.Token=function(e,t,n,a){this.type=e,this.content=t,this.alias=n,this.matchedStr=a||null};if(a.stringify=function(e,t,r){if("string"==typeof e)return e;if("Array"===n.util.type(e))return e.map(function(n){return a.stringify(n,t,e)}).join("");var i={type:e.type,content:a.stringify(e.content,t,r),tag:"span",classes:["token",e.type],attributes:{},language:t,parent:r};if("comment"==i.type&&(i.attributes.spellcheck="true"),e.alias){var l="Array"===n.util.type(e.alias)?e.alias:[e.alias];Array.prototype.push.apply(i.classes,l)}n.hooks.run("wrap",i);var s="";for(var o in i.attributes)s+=(s?" ":"")+o+'="'+(i.attributes[o]||"")+'"';return"<"+i.tag+' class="'+i.classes.join(" ")+'" '+s+">"+i.content+"</"+i.tag+">"},!_self.document)return _self.addEventListener?(_self.addEventListener("message",function(e){var t=JSON.parse(e.data),a=t.language,r=t.code,i=t.immediateClose;_self.postMessage(n.highlight(r,n.languages[a],a)),i&&_self.close()},!1),_self.Prism):_self.Prism;var r=document.currentScript||[].slice.call(document.getElementsByTagName("script")).pop();return r&&(n.filename=r.src,document.addEventListener&&!r.hasAttribute("data-manual")&&document.addEventListener("DOMContentLoaded",n.highlightAll)),_self.Prism}();"undefined"!=typeof module&&module.exports&&(module.exports=Prism),"undefined"!=typeof global&&(global.Prism=Prism),Prism.languages.clike={comment:[{pattern:/(^|[^\\])\/\*[\w\W]*?\*\//,lookbehind:!0},{pattern:/(^|[^\\:])\/\/.*/,lookbehind:!0}],string:{pattern:/(["'])(\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,greedy:!0},"class-name":{pattern:/((?:\b(?:class|interface|extends|implements|trait|instanceof|new)\s+)|(?:catch\s+\())[a-z0-9_\.\\]+/i,lookbehind:!0,inside:{punctuation:/(\.|\\)/}},keyword:/\b(if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\b/,"boolean":/\b(true|false)\b/,"function":/[a-z0-9_]+(?=\()/i,number:/\b-?(?:0x[\da-f]+|\d*\.?\d+(?:e[+-]?\d+)?)\b/i,operator:/--?|\+\+?|!=?=?|<=?|>=?|==?=?|&&?|\|\|?|\?|\*|\/|~|\^|%/,punctuation:/[{}[\];(),.:]/},Prism.languages.javascript=Prism.languages.extend("clike",{keyword:/\b(as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|var|void|while|with|yield)\b/,number:/\b-?(0x[\dA-Fa-f]+|0b[01]+|0o[0-7]+|\d*\.?\d+([Ee][+-]?\d+)?|NaN|Infinity)\b/,"function":/[_$a-zA-Z\xA0-\uFFFF][_$a-zA-Z0-9\xA0-\uFFFF]*(?=\()/i}),Prism.languages.insertBefore("javascript","keyword",{regex:{pattern:/(^|[^\/])\/(?!\/)(\[.+?]|\\.|[^\/\\\r\n])+\/[gimyu]{0,5}(?=\s*($|[\r\n,.;})]))/,lookbehind:!0,greedy:!0}}),Prism.languages.insertBefore("javascript","class-name",{"template-string":{pattern:/`(?:\\\\|\\?[^\\])*?`/,inside:{interpolation:{pattern:/\$\{[^}]+\}/,inside:{"interpolation-punctuation":{pattern:/^\$\{|\}$/,alias:"punctuation"},rest:Prism.languages.javascript}},string:/[\s\S]+/}}}),Prism.languages.markup&&Prism.languages.insertBefore("markup","tag",{script:{pattern:/(<script[\w\W]*?>)[\w\W]*?(?=<\/script>)/i,lookbehind:!0,inside:Prism.languages.javascript,alias:"language-javascript"}}),Prism.languages.js=Prism.languages.javascript;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiLCJwcmlzbS5qcyJdLCJuYW1lcyI6WyJ3aW5kb3ciLCJhZGRFdmVudExpc3RlbmVyIiwiY2hhbmdlX2NvZGUiLCJlbGVtZW50IiwidGV4dCIsInZhbHVlIiwiaXNvZ3JhbSIsInN0eWxlIiwiYm9yZGVyQ29sb3IiLCJnYWNvZGUiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ0ZXh0Q29udGVudCIsImdldEdBU25pcHBldCIsIlByaXNtIiwiaGlnaGxpZ2h0RWxlbWVudCIsImkiLCJsZW5ndGgiLCJtYXRjaCIsIlJlZ0V4cCIsInBhcmFtX2xpc3QiLCJ0ZW1wbGF0ZSIsImFyZ3MiLCJyZXBsYWNlIiwic2xpY2UiLCJqb2luIiwic3BsaXQiLCJ0ZXh0RWxlbWVudCIsImUiLCJ0YXJnZXQiLCJfc2VsZiIsIldvcmtlckdsb2JhbFNjb3BlIiwic2VsZiIsImxhbmciLCJ1bmlxdWVJZCIsIl8iLCJ1dGlsIiwiZW5jb2RlIiwidG9rZW5zIiwiVG9rZW4iLCJ0eXBlIiwiY29udGVudCIsImFsaWFzIiwibWFwIiwibyIsIk9iamVjdCIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwiY2FsbCIsIm9iaklkIiwib2JqIiwiZGVmaW5lUHJvcGVydHkiLCJjbG9uZSIsImtleSIsImhhc093blByb3BlcnR5IiwidiIsImxhbmd1YWdlcyIsImV4dGVuZCIsImlkIiwicmVkZWYiLCJpbnNlcnRCZWZvcmUiLCJpbnNpZGUiLCJiZWZvcmUiLCJpbnNlcnQiLCJyb290IiwiZ3JhbW1hciIsImFyZ3VtZW50cyIsIm5ld1Rva2VuIiwicmV0IiwidG9rZW4iLCJERlMiLCJ0aGlzIiwiY2FsbGJhY2siLCJ2aXNpdGVkIiwicGx1Z2lucyIsImhpZ2hsaWdodEFsbCIsImFzeW5jIiwiZW52Iiwic2VsZWN0b3IiLCJob29rcyIsInJ1biIsImVsZW1lbnRzIiwicXVlcnlTZWxlY3RvckFsbCIsImxhbmd1YWdlIiwicGFyZW50IiwidGVzdCIsImNsYXNzTmFtZSIsInBhcmVudE5vZGUiLCJub2RlTmFtZSIsImNvZGUiLCJXb3JrZXIiLCJ3b3JrZXIiLCJmaWxlbmFtZSIsIm9ubWVzc2FnZSIsImV2dCIsImhpZ2hsaWdodGVkQ29kZSIsImRhdGEiLCJpbm5lckhUTUwiLCJwb3N0TWVzc2FnZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJpbW1lZGlhdGVDbG9zZSIsImhpZ2hsaWdodCIsInRva2VuaXplIiwic3RyYXJyIiwicmVzdCIsInRva2VubG9vcCIsInBhdHRlcm5zIiwiaiIsInBhdHRlcm4iLCJsb29rYmVoaW5kIiwiZ3JlZWR5IiwibG9va2JlaGluZExlbmd0aCIsInN0ciIsImxhc3RJbmRleCIsImV4ZWMiLCJkZWxOdW0iLCJuZXh0VG9rZW4iLCJtYXRjaGVkU3RyIiwiY29tYlN0ciIsImZyb20iLCJpbmRleCIsInRvIiwibGVuIiwiYWZ0ZXIiLCJwdXNoIiwid3JhcHBlZCIsIkFycmF5Iiwic3BsaWNlIiwiYXBwbHkiLCJhbGwiLCJhZGQiLCJuYW1lIiwiY2FsbGJhY2tzIiwidGFnIiwiY2xhc3NlcyIsImF0dHJpYnV0ZXMiLCJhbGlhc2VzIiwibWVzc2FnZSIsInBhcnNlIiwiY2xvc2UiLCJzY3JpcHQiLCJjdXJyZW50U2NyaXB0IiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJwb3AiLCJzcmMiLCJoYXNBdHRyaWJ1dGUiLCJtb2R1bGUiLCJleHBvcnRzIiwiZ2xvYmFsIiwiY2xpa2UiLCJjb21tZW50Iiwic3RyaW5nIiwiY2xhc3MtbmFtZSIsInB1bmN0dWF0aW9uIiwia2V5d29yZCIsImJvb2xlYW4iLCJmdW5jdGlvbiIsIm51bWJlciIsIm9wZXJhdG9yIiwiamF2YXNjcmlwdCIsInJlZ2V4IiwidGVtcGxhdGUtc3RyaW5nIiwiaW50ZXJwb2xhdGlvbiIsImludGVycG9sYXRpb24tcHVuY3R1YXRpb24iLCJtYXJrdXAiLCJqcyJdLCJtYXBwaW5ncyI6IkFBQUEsWUFDQUEsUUFBT0MsaUJBQWlCLE9BQVEsV0FPOUIsUUFBU0MsR0FBWUMsR0FDbkIsR0FBSUMsR0FBT0QsRUFBUUUsS0FDbkIsSUFBSUMsRUFBUUYsR0FBTyxDQUVqQkQsRUFBUUksTUFBTUMsWUFBYyxPQUM1QixJQUFJQyxHQUFTQyxTQUFTQyxjQUFjLFVBQ3BDRixHQUFPRyxZQUFjQyxFQUFhVCxHQUNsQ1UsTUFBTUMsaUJBQWlCTixPQUd2Qk4sR0FBUUksTUFBTUMsWUFBYyxNQUloQyxRQUFTRixHQUFRRixHQUNmLElBQUssR0FBSVksR0FBSSxFQUFHQSxFQUFJWixFQUFLYSxPQUFRRCxJQUMvQixJQUFLWixFQUFLYyxNQUFNLEdBQUlDLFFBQU9mLEVBQUtZLEdBQUksV0FBYUMsT0FBUyxFQUN4RCxPQUFPLENBR1gsUUFBTyxFQUdULFFBQVNKLEdBQWFPLEdBRXBCLEdBQUlDLEdBQVcsNFlBQ1hDLEdBQVEsU0FBVSxXQUFZLFdBQWMsNENBQStDLE9BaUQvRixPQTNDRUQsR0FEdUIsR0FBckJELEVBQVdILE9BQ0ZJLEVBQVNFLFFBQVEsT0FBUUQsRUFBSyxJQUU5QkQsRUFBU0UsUUFBUSxPQUFRSCxFQUFXLElBRy9DQyxFQURFRCxFQUFXSCxRQUFVLEVBQ1pJLEVBQVNFLFFBQVEsT0FBUUQsRUFBSyxJQUU5QkQsRUFBU0UsUUFBUSxPQUFRSCxFQUFXLElBRy9DQyxFQURFRCxFQUFXSCxRQUFVLEVBQ1pJLEVBQVNFLFFBQVEsT0FBUUQsRUFBSyxJQUU5QkQsRUFBU0UsUUFBUSxPQUFRSCxFQUFXLElBRy9DQyxFQURFRCxFQUFXSCxRQUFVLEVBQ1pJLEVBQVNFLFFBQVEsT0FBUUQsRUFBSyxJQUU5QkQsRUFBU0UsUUFBUSxPQUFRSCxFQUFXLElBRy9DQyxFQURFRCxFQUFXSCxRQUFVLEVBQ1pJLEVBQVNFLFFBQVEsT0FBUUQsRUFBSyxJQUU5QkQsRUFBU0UsUUFBUSxPQUFRSCxFQUFXLElBRy9DQyxFQURFRCxFQUFXSCxRQUFVLEVBQ1pJLEVBQVNFLFFBQVEsT0FBUSxLQUV6QkYsRUFBU0UsUUFBUSxPQUFRSCxFQUFXLElBRy9DQyxFQURFRCxFQUFXSCxRQUFVLEVBQ1pJLEVBQVNFLFFBQVEsT0FBUSxLQUV6QkYsRUFBU0UsUUFBUSxPQUFRSCxFQUFXLElBSzdDQSxFQUFXSCxPQUFTLElBQ3RCSyxFQUFPQSxFQUFLRSxNQUFNLEVBQUdGLEVBQUtMLFFBQVUsRUFBSUcsRUFBV0gsVUFFckRJLEVBQVdBLEVBQVNFLFFBQVEsU0FBVUQsRUFBS0csS0FBSyxNQUNoREosRUFBV0EsRUFBU0UsUUFBUSxXQUFZSCxFQUFXTSxNQUFNLElBQUlELEtBQUssTUEvRXBFLEdBQUlFLEdBQWNqQixTQUFTQyxjQUFjLFFBQ3pDVCxHQUFZeUIsR0FDWkEsRUFBWTFCLGlCQUFpQixRQUFTLFNBQVMyQixHQUM3QzFCLEVBQVkwQixFQUFFQztBQ0psQixHQUFJQyxPQUEyQixtQkFBWDlCLFFBQ2pCQSxPQUU2QixtQkFBdEIrQixvQkFBcUNDLGVBQWdCRCxtQkFDM0RDLFFBVUFsQixNQUFRLFdBR1osR0FBSW1CLEdBQU8sMkJBQ1BDLEVBQVcsRUFFWEMsRUFBSUwsTUFBTWhCLE9BQ2JzQixNQUNDQyxPQUFRLFNBQVVDLEdBQ2pCLE1BQUlBLGFBQWtCQyxHQUNkLEdBQUlBLEdBQU1ELEVBQU9FLEtBQU1MLEVBQUVDLEtBQUtDLE9BQU9DLEVBQU9HLFNBQVVILEVBQU9JLE9BQ2xDLFVBQXhCUCxFQUFFQyxLQUFLSSxLQUFLRixHQUNmQSxFQUFPSyxJQUFJUixFQUFFQyxLQUFLQyxRQUVsQkMsRUFBT2YsUUFBUSxLQUFNLFNBQVNBLFFBQVEsS0FBTSxRQUFRQSxRQUFRLFVBQVcsTUFJaEZpQixLQUFNLFNBQVVJLEdBQ2YsTUFBT0MsUUFBT0MsVUFBVUMsU0FBU0MsS0FBS0osR0FBRzFCLE1BQU0sb0JBQW9CLElBR3BFK0IsTUFBTyxTQUFVQyxHQUloQixNQUhLQSxHQUFVLE1BQ2RMLE9BQU9NLGVBQWVELEVBQUssUUFBVTdDLFFBQVM2QixJQUV4Q2dCLEVBQVUsTUFJbEJFLE1BQU8sU0FBVVIsR0FDaEIsR0FBSUosR0FBT0wsRUFBRUMsS0FBS0ksS0FBS0ksRUFFdkIsUUFBUUosR0FDUCxJQUFLLFNBQ0osR0FBSVksS0FFSixLQUFLLEdBQUlDLEtBQU9ULEdBQ1hBLEVBQUVVLGVBQWVELEtBQ3BCRCxFQUFNQyxHQUFPbEIsRUFBRUMsS0FBS2dCLE1BQU1SLEVBQUVTLElBSTlCLE9BQU9ELEVBRVIsS0FBSyxRQUVKLE1BQU9SLEdBQUVELEtBQU9DLEVBQUVELElBQUksU0FBU1ksR0FBSyxNQUFPcEIsR0FBRUMsS0FBS2dCLE1BQU1HLEtBRzFELE1BQU9YLEtBSVRZLFdBQ0NDLE9BQVEsU0FBVUMsRUFBSUMsR0FDckIsR0FBSTFCLEdBQU9FLEVBQUVDLEtBQUtnQixNQUFNakIsRUFBRXFCLFVBQVVFLEdBRXBDLEtBQUssR0FBSUwsS0FBT00sR0FDZjFCLEVBQUtvQixHQUFPTSxFQUFNTixFQUduQixPQUFPcEIsSUFZUjJCLGFBQWMsU0FBVUMsRUFBUUMsRUFBUUMsRUFBUUMsR0FDL0NBLEVBQU9BLEdBQVE3QixFQUFFcUIsU0FDakIsSUFBSVMsR0FBVUQsRUFBS0gsRUFFbkIsSUFBd0IsR0FBcEJLLFVBQVVqRCxPQUFhLENBQzFCOEMsRUFBU0csVUFBVSxFQUVuQixLQUFLLEdBQUlDLEtBQVlKLEdBQ2hCQSxFQUFPVCxlQUFlYSxLQUN6QkYsRUFBUUUsR0FBWUosRUFBT0ksR0FJN0IsT0FBT0YsR0FHUixHQUFJRyxLQUVKLEtBQUssR0FBSUMsS0FBU0osR0FFakIsR0FBSUEsRUFBUVgsZUFBZWUsR0FBUSxDQUVsQyxHQUFJQSxHQUFTUCxFQUVaLElBQUssR0FBSUssS0FBWUosR0FFaEJBLEVBQU9ULGVBQWVhLEtBQ3pCQyxFQUFJRCxHQUFZSixFQUFPSSxHQUsxQkMsR0FBSUMsR0FBU0osRUFBUUksR0FXdkIsTUFOQWxDLEdBQUVxQixVQUFVYyxJQUFJbkMsRUFBRXFCLFVBQVcsU0FBU0gsRUFBS2hELEdBQ3RDQSxJQUFVMkQsRUFBS0gsSUFBV1IsR0FBT1EsSUFDcENVLEtBQUtsQixHQUFPZSxLQUlQSixFQUFLSCxHQUFVTyxHQUl2QkUsSUFBSyxTQUFTMUIsRUFBRzRCLEVBQVVoQyxFQUFNaUMsR0FDaENBLEVBQVVBLEtBQ1YsS0FBSyxHQUFJekQsS0FBSzRCLEdBQ1RBLEVBQUVVLGVBQWV0QyxLQUNwQndELEVBQVN4QixLQUFLSixFQUFHNUIsRUFBRzRCLEVBQUU1QixHQUFJd0IsR0FBUXhCLEdBRVIsV0FBdEJtQixFQUFFQyxLQUFLSSxLQUFLSSxFQUFFNUIsS0FBcUJ5RCxFQUFRdEMsRUFBRUMsS0FBS2EsTUFBTUwsRUFBRTVCLEtBSS9CLFVBQXRCbUIsRUFBRUMsS0FBS0ksS0FBS0ksRUFBRTVCLEtBQW9CeUQsRUFBUXRDLEVBQUVDLEtBQUthLE1BQU1MLEVBQUU1QixPQUNqRXlELEVBQVF0QyxFQUFFQyxLQUFLYSxNQUFNTCxFQUFFNUIsTUFBTyxFQUM5Qm1CLEVBQUVxQixVQUFVYyxJQUFJMUIsRUFBRTVCLEdBQUl3RCxFQUFVeEQsRUFBR3lELEtBTG5DQSxFQUFRdEMsRUFBRUMsS0FBS2EsTUFBTUwsRUFBRTVCLE1BQU8sRUFDOUJtQixFQUFFcUIsVUFBVWMsSUFBSTFCLEVBQUU1QixHQUFJd0QsRUFBVSxLQUFNQyxPQVUzQ0MsV0FFQUMsYUFBYyxTQUFTQyxFQUFPSixHQUM3QixHQUFJSyxJQUNITCxTQUFVQSxFQUNWTSxTQUFVLG1HQUdYM0MsR0FBRTRDLE1BQU1DLElBQUksc0JBQXVCSCxFQUluQyxLQUFLLEdBQVMxRSxHQUZWOEUsRUFBV0osRUFBSUksVUFBWXZFLFNBQVN3RSxpQkFBaUJMLEVBQUlDLFVBRXBEOUQsRUFBRSxFQUFZYixFQUFVOEUsRUFBU2pFLE1BQ3pDbUIsRUFBRXBCLGlCQUFpQlosRUFBU3lFLEtBQVUsRUFBTUMsRUFBSUwsV0FJbER6RCxpQkFBa0IsU0FBU1osRUFBU3lFLEVBQU9KLEdBSTFDLElBRkEsR0FBSVcsR0FBVWxCLEVBQVNtQixFQUFTakYsRUFFekJpRixJQUFXbkQsRUFBS29ELEtBQUtELEVBQU9FLFlBQ2xDRixFQUFTQSxFQUFPRyxVQUdiSCxLQUNIRCxHQUFZQyxFQUFPRSxVQUFVcEUsTUFBTWUsS0FBVSxDQUFDLEtBQUssR0FDbkRnQyxFQUFVOUIsRUFBRXFCLFVBQVUyQixJQUl2QmhGLEVBQVFtRixVQUFZbkYsRUFBUW1GLFVBQVUvRCxRQUFRVSxFQUFNLElBQUlWLFFBQVEsT0FBUSxLQUFPLGFBQWU0RCxFQUc5RkMsRUFBU2pGLEVBQVFvRixXQUViLE9BQU9GLEtBQUtELEVBQU9JLFlBQ3RCSixFQUFPRSxVQUFZRixFQUFPRSxVQUFVL0QsUUFBUVUsRUFBTSxJQUFJVixRQUFRLE9BQVEsS0FBTyxhQUFlNEQsRUFHN0YsSUFBSU0sR0FBT3RGLEVBQVFTLFlBRWZpRSxHQUNIMUUsUUFBU0EsRUFDVGdGLFNBQVVBLEVBQ1ZsQixRQUFTQSxFQUNUd0IsS0FBTUEsRUFHUCxLQUFLQSxJQUFTeEIsRUFFYixXQURBOUIsR0FBRTRDLE1BQU1DLElBQUksV0FBWUgsRUFNekIsSUFGQTFDLEVBQUU0QyxNQUFNQyxJQUFJLG1CQUFvQkgsR0FFNUJELEdBQVM5QyxNQUFNNEQsT0FBUSxDQUMxQixHQUFJQyxHQUFTLEdBQUlELFFBQU92RCxFQUFFeUQsU0FFMUJELEdBQU9FLFVBQVksU0FBU0MsR0FDM0JqQixFQUFJa0IsZ0JBQWtCRCxFQUFJRSxLQUUxQjdELEVBQUU0QyxNQUFNQyxJQUFJLGdCQUFpQkgsR0FFN0JBLEVBQUkxRSxRQUFROEYsVUFBWXBCLEVBQUlrQixnQkFFNUJ2QixHQUFZQSxFQUFTeEIsS0FBSzZCLEVBQUkxRSxTQUM5QmdDLEVBQUU0QyxNQUFNQyxJQUFJLGtCQUFtQkgsR0FDL0IxQyxFQUFFNEMsTUFBTUMsSUFBSSxXQUFZSCxJQUd6QmMsRUFBT08sWUFBWUMsS0FBS0MsV0FDdkJqQixTQUFVTixFQUFJTSxTQUNkTSxLQUFNWixFQUFJWSxLQUNWWSxnQkFBZ0IsU0FJakJ4QixHQUFJa0IsZ0JBQWtCNUQsRUFBRW1FLFVBQVV6QixFQUFJWSxLQUFNWixFQUFJWixRQUFTWSxFQUFJTSxVQUU3RGhELEVBQUU0QyxNQUFNQyxJQUFJLGdCQUFpQkgsR0FFN0JBLEVBQUkxRSxRQUFROEYsVUFBWXBCLEVBQUlrQixnQkFFNUJ2QixHQUFZQSxFQUFTeEIsS0FBSzdDLEdBRTFCZ0MsRUFBRTRDLE1BQU1DLElBQUksa0JBQW1CSCxHQUMvQjFDLEVBQUU0QyxNQUFNQyxJQUFJLFdBQVlILElBSTFCeUIsVUFBVyxTQUFVbEcsRUFBTTZELEVBQVNrQixHQUNuQyxHQUFJN0MsR0FBU0gsRUFBRW9FLFNBQVNuRyxFQUFNNkQsRUFDOUIsT0FBTzFCLEdBQU02RCxVQUFVakUsRUFBRUMsS0FBS0MsT0FBT0MsR0FBUzZDLElBRy9Db0IsU0FBVSxTQUFTbkcsRUFBTTZELEVBQVNrQixHQUNqQyxHQUFJNUMsR0FBUUosRUFBRUksTUFFVmlFLEdBQVVwRyxHQUVWcUcsRUFBT3hDLEVBQVF3QyxJQUVuQixJQUFJQSxFQUFNLENBQ1QsSUFBSyxHQUFJcEMsS0FBU29DLEdBQ2pCeEMsRUFBUUksR0FBU29DLEVBQUtwQyxTQUdoQkosR0FBUXdDLEtBR2hCQyxFQUFXLElBQUssR0FBSXJDLEtBQVNKLEdBQzVCLEdBQUlBLEVBQVFYLGVBQWVlLElBQVdKLEVBQVFJLEdBQTlDLENBSUEsR0FBSXNDLEdBQVcxQyxFQUFRSSxFQUN2QnNDLEdBQXNDLFVBQTFCeEUsRUFBRUMsS0FBS0ksS0FBS21FLEdBQXlCQSxHQUFZQSxFQUU3RCxLQUFLLEdBQUlDLEdBQUksRUFBR0EsRUFBSUQsRUFBUzFGLFNBQVUyRixFQUFHLENBQ3pDLEdBQUlDLEdBQVVGLEVBQVNDLEdBQ3RCL0MsRUFBU2dELEVBQVFoRCxPQUNqQmlELElBQWVELEVBQVFDLFdBQ3ZCQyxJQUFXRixFQUFRRSxPQUNuQkMsRUFBbUIsRUFDbkJ0RSxFQUFRbUUsRUFBUW5FLEtBRWpCbUUsR0FBVUEsRUFBUUEsU0FBV0EsQ0FFN0IsS0FBSyxHQUFJN0YsR0FBRSxFQUFHQSxFQUFFd0YsRUFBT3ZGLE9BQVFELElBQUssQ0FFbkMsR0FBSWlHLEdBQU1ULEVBQU94RixFQUVqQixJQUFJd0YsRUFBT3ZGLE9BQVNiLEVBQUthLE9BRXhCLEtBQU15RixFQUdQLE1BQUlPLFlBQWUxRSxJQUFuQixDQUlBc0UsRUFBUUssVUFBWSxDQUVwQixJQUFJaEcsR0FBUTJGLEVBQVFNLEtBQUtGLEdBQ3JCRyxFQUFTLENBR2IsS0FBS2xHLEdBQVM2RixHQUFVL0YsR0FBS3dGLEVBQU92RixPQUFTLEVBQUcsQ0FFL0MsR0FBSW9HLEdBQVliLEVBQU94RixFQUFJLEdBQUdzRyxZQUFjZCxFQUFPeEYsRUFBSSxHQUNuRHVHLEVBQVVOLEVBQU1JLENBU3BCLElBUElyRyxFQUFJd0YsRUFBT3ZGLE9BQVMsSUFDdkJzRyxHQUFXZixFQUFPeEYsRUFBSSxHQUFHc0csWUFBY2QsRUFBT3hGLEVBQUksSUFJbkQ2RixFQUFRSyxVQUFZLEVBQ3BCaEcsRUFBUTJGLEVBQVFNLEtBQUtJLElBQ2hCckcsRUFDSixRQUdELElBQUlzRyxHQUFPdEcsRUFBTXVHLE9BQVNYLEVBQWE1RixFQUFNLEdBQUdELE9BQVMsRUFFekQsSUFBSXVHLEdBQVFQLEVBQUloRyxPQUNmLFFBRUQsSUFBSXlHLEdBQUt4RyxFQUFNdUcsTUFBUXZHLEVBQU0sR0FBR0QsT0FDNUIwRyxFQUFNVixFQUFJaEcsT0FBU29HLEVBQVVwRyxNQUdqQ21HLEdBQVMsRUFFQ08sR0FBTkQsSUFDSE4sRUFBUyxFQUNURyxFQUFVQSxFQUFRL0YsTUFBTSxFQUFHbUcsSUFFNUJWLEVBQU1NLEVBR1AsR0FBS3JHLEVBQUwsQ0FJRzRGLElBQ0ZFLEVBQW1COUYsRUFBTSxHQUFHRCxPQUc3QixJQUFJdUcsR0FBT3RHLEVBQU11RyxNQUFRVCxFQUNyQjlGLEVBQVFBLEVBQU0sR0FBR00sTUFBTXdGLEdBQ3ZCVSxFQUFLRixFQUFPdEcsRUFBTUQsT0FDbEI2QyxFQUFTbUQsRUFBSXpGLE1BQU0sRUFBR2dHLEdBQ3RCSSxFQUFRWCxFQUFJekYsTUFBTWtHLEdBRWxCcEcsR0FBUU4sRUFBR29HLEVBRVh0RCxJQUNIeEMsRUFBS3VHLEtBQUsvRCxFQUdYLElBQUlnRSxHQUFVLEdBQUl2RixHQUFNOEIsRUFBT1IsRUFBUTFCLEVBQUVvRSxTQUFTckYsRUFBTzJDLEdBQVUzQyxFQUFPd0IsRUFBT3hCLEVBRWpGSSxHQUFLdUcsS0FBS0MsR0FFTkYsR0FDSHRHLEVBQUt1RyxLQUFLRCxHQUdYRyxNQUFNakYsVUFBVWtGLE9BQU9DLE1BQU16QixFQUFRbEYsT0FLeEMsTUFBT2tGLElBR1J6QixPQUNDbUQsT0FFQUMsSUFBSyxTQUFVQyxFQUFNNUQsR0FDcEIsR0FBSU8sR0FBUTVDLEVBQUU0QyxNQUFNbUQsR0FFcEJuRCxHQUFNcUQsR0FBUXJELEVBQU1xRCxPQUVwQnJELEVBQU1xRCxHQUFNUCxLQUFLckQsSUFHbEJRLElBQUssU0FBVW9ELEVBQU12RCxHQUNwQixHQUFJd0QsR0FBWWxHLEVBQUU0QyxNQUFNbUQsSUFBSUUsRUFFNUIsSUFBS0MsR0FBY0EsRUFBVXBILE9BSTdCLElBQUssR0FBU3VELEdBQUx4RCxFQUFFLEVBQWF3RCxFQUFXNkQsRUFBVXJILE1BQzVDd0QsRUFBU0ssTUFNVHRDLEVBQVFKLEVBQUVJLE1BQVEsU0FBU0MsRUFBTUMsRUFBU0MsRUFBTzRFLEdBQ3BEL0MsS0FBSy9CLEtBQU9BLEVBQ1orQixLQUFLOUIsUUFBVUEsRUFDZjhCLEtBQUs3QixNQUFRQSxFQUViNkIsS0FBSytDLFdBQWFBLEdBQWMsS0E2Q2pDLElBMUNBL0UsRUFBTTZELFVBQVksU0FBU3hELEVBQUd1QyxFQUFVQyxHQUN2QyxHQUFnQixnQkFBTHhDLEdBQ1YsTUFBT0EsRUFHUixJQUF1QixVQUFuQlQsRUFBRUMsS0FBS0ksS0FBS0ksR0FDZixNQUFPQSxHQUFFRCxJQUFJLFNBQVN4QyxHQUNyQixNQUFPb0MsR0FBTTZELFVBQVVqRyxFQUFTZ0YsRUFBVXZDLEtBQ3hDbkIsS0FBSyxHQUdULElBQUlvRCxJQUNIckMsS0FBTUksRUFBRUosS0FDUkMsUUFBU0YsRUFBTTZELFVBQVV4RCxFQUFFSCxRQUFTMEMsRUFBVUMsR0FDOUNrRCxJQUFLLE9BQ0xDLFNBQVUsUUFBUzNGLEVBQUVKLE1BQ3JCZ0csY0FDQXJELFNBQVVBLEVBQ1ZDLE9BQVFBLEVBT1QsSUFKZ0IsV0FBWlAsRUFBSXJDLE9BQ1BxQyxFQUFJMkQsV0FBdUIsV0FBSSxRQUc1QjVGLEVBQUVGLE1BQU8sQ0FDWixHQUFJK0YsR0FBbUMsVUFBekJ0RyxFQUFFQyxLQUFLSSxLQUFLSSxFQUFFRixPQUFxQkUsRUFBRUYsT0FBU0UsRUFBRUYsTUFDOURxRixPQUFNakYsVUFBVStFLEtBQUtJLE1BQU1wRCxFQUFJMEQsUUFBU0UsR0FHekN0RyxFQUFFNEMsTUFBTUMsSUFBSSxPQUFRSCxFQUVwQixJQUFJMkQsR0FBYSxFQUVqQixLQUFLLEdBQUlKLEtBQVF2RCxHQUFJMkQsV0FDcEJBLElBQWVBLEVBQWEsSUFBTSxJQUFNSixFQUFPLE1BQVF2RCxFQUFJMkQsV0FBV0osSUFBUyxJQUFNLEdBR3RGLE9BQU8sSUFBTXZELEVBQUl5RCxJQUFNLFdBQWF6RCxFQUFJMEQsUUFBUTlHLEtBQUssS0FBTyxLQUFPK0csRUFBYSxJQUFNM0QsRUFBSXBDLFFBQVUsS0FBT29DLEVBQUl5RCxJQUFNLE1BSWpIeEcsTUFBTXBCLFNBQ1YsTUFBS29CLE9BQU03QixrQkFLWDZCLE1BQU03QixpQkFBaUIsVUFBVyxTQUFTNkYsR0FDMUMsR0FBSTRDLEdBQVV2QyxLQUFLd0MsTUFBTTdDLEVBQUlFLE1BQ3pCL0QsRUFBT3lHLEVBQVF2RCxTQUNmTSxFQUFPaUQsRUFBUWpELEtBQ2ZZLEVBQWlCcUMsRUFBUXJDLGNBRTdCdkUsT0FBTW9FLFlBQVkvRCxFQUFFbUUsVUFBVWIsRUFBTXRELEVBQUVxQixVQUFVdkIsR0FBT0EsSUFDbkRvRSxHQUNIdkUsTUFBTThHLFVBRUwsR0FFSTlHLE1BQU1oQixPQWZMZ0IsTUFBTWhCLEtBbUJmLElBQUkrSCxHQUFTbkksU0FBU29JLGtCQUFvQnRILE1BQU13QixLQUFLdEMsU0FBU3FJLHFCQUFxQixXQUFXQyxLQVU5RixPQVJJSCxLQUNIMUcsRUFBRXlELFNBQVdpRCxFQUFPSSxJQUVoQnZJLFNBQVNULG1CQUFxQjRJLEVBQU9LLGFBQWEsZ0JBQ3JEeEksU0FBU1QsaUJBQWlCLG1CQUFvQmtDLEVBQUV3QyxlQUkzQzdDLE1BQU1oQixRQUlTLG9CQUFYcUksU0FBMEJBLE9BQU9DLFVBQzNDRCxPQUFPQyxRQUFVdEksT0FJSSxtQkFBWHVJLFVBQ1ZBLE9BQU92SSxNQUFRQSxPQUdoQkEsTUFBTTBDLFVBQVU4RixPQUNmQyxVQUVFMUMsUUFBUyw0QkFDVEMsWUFBWSxJQUdaRCxRQUFTLG1CQUNUQyxZQUFZLElBR2QwQyxRQUNDM0MsUUFBUywrQ0FDVEUsUUFBUSxHQUVUMEMsY0FDQzVDLFFBQVMsdUdBQ1RDLFlBQVksRUFDWmpELFFBQ0M2RixZQUFhLFlBR2ZDLFFBQVcsMkdBQ1hDLFVBQVcsbUJBQ1hDLFdBQVksb0JBQ1pDLE9BQVUsZ0RBQ1ZDLFNBQVksMERBQ1pMLFlBQWUsaUJBR2hCNUksTUFBTTBDLFVBQVV3RyxXQUFhbEosTUFBTTBDLFVBQVVDLE9BQU8sU0FDbkRrRyxRQUFXLDRUQUNYRyxPQUFVLCtFQUVWRCxXQUFZLDBEQUdiL0ksTUFBTTBDLFVBQVVJLGFBQWEsYUFBYyxXQUMxQ3FHLE9BQ0NwRCxRQUFTLGlGQUNUQyxZQUFZLEVBQ1pDLFFBQVEsS0FJVmpHLE1BQU0wQyxVQUFVSSxhQUFhLGFBQWMsY0FDMUNzRyxtQkFDQ3JELFFBQVMsd0JBQ1RoRCxRQUNDc0csZUFDQ3RELFFBQVMsY0FDVGhELFFBQ0N1Ryw2QkFDQ3ZELFFBQVMsWUFDVG5FLE1BQU8sZUFFUitELEtBQU0zRixNQUFNMEMsVUFBVXdHLGFBR3hCUixPQUFVLGNBS1QxSSxNQUFNMEMsVUFBVTZHLFFBQ25CdkosTUFBTTBDLFVBQVVJLGFBQWEsU0FBVSxPQUN0Q2lGLFFBQ0NoQyxRQUFTLDRDQUNUQyxZQUFZLEVBQ1pqRCxPQUFRL0MsTUFBTTBDLFVBQVV3RyxXQUN4QnRILE1BQU8seUJBS1Y1QixNQUFNMEMsVUFBVThHLEdBQUt4SixNQUFNMEMsVUFBVXdHIiwiZmlsZSI6ImFsbC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGZ1bmN0aW9uKCkge1xuICB2YXIgdGV4dEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjdGV4dCcpO1xuICBjaGFuZ2VfY29kZSh0ZXh0RWxlbWVudCk7XG4gIHRleHRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgZnVuY3Rpb24oZSkge1xuICAgIGNoYW5nZV9jb2RlKGUudGFyZ2V0KVxuICB9KTtcblxuICBmdW5jdGlvbiBjaGFuZ2VfY29kZShlbGVtZW50KSB7XG4gICAgdmFyIHRleHQgPSBlbGVtZW50LnZhbHVlO1xuICAgIGlmIChpc29ncmFtKHRleHQpKSB7XG4gICAgICAvLyB0aGlzIGlzIHRlbXBlcmFyeSBhbmQgdmVyeSB1Z2x5XG4gICAgICBlbGVtZW50LnN0eWxlLmJvcmRlckNvbG9yID0gJ2JsYWNrJztcbiAgICAgIHZhciBnYWNvZGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZ2Fjb2RlJyk7XG4gICAgICBnYWNvZGUudGV4dENvbnRlbnQgPSBnZXRHQVNuaXBwZXQodGV4dCk7XG4gICAgICBQcmlzbS5oaWdobGlnaHRFbGVtZW50KGdhY29kZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHRoaXMgaXMgdGVtcGVyYXJ5IGFuZCB2ZXJ5IHVnbHlcbiAgICAgIGVsZW1lbnQuc3R5bGUuYm9yZGVyQ29sb3IgPSAncmVkJztcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpc29ncmFtKHRleHQpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRleHQubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICgodGV4dC5tYXRjaChuZXcgUmVnRXhwKHRleHRbaV0sICdnJykpIHx8IFtdKS5sZW5ndGggPiAxKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRHQVNuaXBwZXQocGFyYW1fbGlzdCkge1xuICAgIC8vIGh0bWwgdGVtcGxhdGUgd2l0aCBwbGFjZWhvbGRlcnNcbiAgICB2YXIgdGVtcGxhdGUgPSAnPHNjcmlwdD5cXG4gIChmdW5jdGlvbihfcGFyYW1zKXtfcDBbXFwnR29vZ2xlQW5hbHl0aWNzT2JqZWN0XFwnXT1fcDQ7X3AwW19wNF09X3AwW19wNF18fGZ1bmN0aW9uKCl7XFxuICAoX3AwW19wNF0ucT1fcDBbX3A0XS5xfHxbXSkucHVzaChhcmd1bWVudHMpfSxfcDBbX3A0XS5sPTEqbmV3IERhdGUoKTtfcDU9X3AxLmNyZWF0ZUVsZW1lbnQoX3AyKSxcXG4gIF9wNj1fcDEuZ2V0RWxlbWVudHNCeVRhZ05hbWUoX3AyKVswXTtfcDUuYXN5bmM9MTtfcDUuc3JjPV9wMztfcDYucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoX3A1LF9wNilcXG4gIH0pKF9hcmdzKTtcXG5cXG4gIGdhKFxcJ2NyZWF0ZVxcJywgXFwnVUEtWFhYWFhYWFgtWFxcJywgXFwnYXV0b1xcJyk7XFxuICBnYShcXCdzZW5kXFwnLCBcXCdwYWdldmlld1xcJyk7XFxuXFxuPC9zY3JpcHQ+JztcbiAgICB2YXIgYXJncyA9IFsnd2luZG93JywgJ2RvY3VtZW50JywgJ1xcJ3NjcmlwdFxcJycsICdcXCcvL3d3dy5nb29nbGUtYW5hbHl0aWNzLmNvbS9hbmFseXRpY3MuanNcXCcnLCAnXFwnZ2FcXCcnXVxuXG4gICAgLy8gcmVwbGFjZSB0aGUgcGxhY2Vob2xkZXJzIHdpdGggdmFyaWFibGUgbmFtZXMgb3JcbiAgICAvLyBpZiBub3QgZW5vdWdoIHBhcmFtcyBpbiBwYXJhbV9saXN0LCBqdXN0IGhhcmRjb2RlXG4gICAgLy8gdGhlIHZhbHVlXG4gICAgaWYgKHBhcmFtX2xpc3QubGVuZ3RoID09IDApIHtcbiAgICAgIHRlbXBsYXRlID0gdGVtcGxhdGUucmVwbGFjZSgvX3AwL2csIGFyZ3NbMF0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0ZW1wbGF0ZSA9IHRlbXBsYXRlLnJlcGxhY2UoL19wMC9nLCBwYXJhbV9saXN0WzBdKTtcbiAgICB9XG4gICAgaWYgKHBhcmFtX2xpc3QubGVuZ3RoIDw9IDEpIHtcbiAgICAgIHRlbXBsYXRlID0gdGVtcGxhdGUucmVwbGFjZSgvX3AxL2csIGFyZ3NbMV0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0ZW1wbGF0ZSA9IHRlbXBsYXRlLnJlcGxhY2UoL19wMS9nLCBwYXJhbV9saXN0WzFdKTtcbiAgICB9XG4gICAgaWYgKHBhcmFtX2xpc3QubGVuZ3RoIDw9IDIpIHtcbiAgICAgIHRlbXBsYXRlID0gdGVtcGxhdGUucmVwbGFjZSgvX3AyL2csIGFyZ3NbMl0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0ZW1wbGF0ZSA9IHRlbXBsYXRlLnJlcGxhY2UoL19wMi9nLCBwYXJhbV9saXN0WzJdKTtcbiAgICB9XG4gICAgaWYgKHBhcmFtX2xpc3QubGVuZ3RoIDw9IDMpIHtcbiAgICAgIHRlbXBsYXRlID0gdGVtcGxhdGUucmVwbGFjZSgvX3AzL2csIGFyZ3NbM10pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0ZW1wbGF0ZSA9IHRlbXBsYXRlLnJlcGxhY2UoL19wMy9nLCBwYXJhbV9saXN0WzNdKTtcbiAgICB9XG4gICAgaWYgKHBhcmFtX2xpc3QubGVuZ3RoIDw9IDQpIHtcbiAgICAgIHRlbXBsYXRlID0gdGVtcGxhdGUucmVwbGFjZSgvX3A0L2csIGFyZ3NbNF0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0ZW1wbGF0ZSA9IHRlbXBsYXRlLnJlcGxhY2UoL19wNC9nLCBwYXJhbV9saXN0WzRdKTtcbiAgICB9XG4gICAgaWYgKHBhcmFtX2xpc3QubGVuZ3RoIDw9IDUpIHtcbiAgICAgIHRlbXBsYXRlID0gdGVtcGxhdGUucmVwbGFjZSgvX3A1L2csICdhJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRlbXBsYXRlID0gdGVtcGxhdGUucmVwbGFjZSgvX3A1L2csIHBhcmFtX2xpc3RbNV0pO1xuICAgIH1cbiAgICBpZiAocGFyYW1fbGlzdC5sZW5ndGggPD0gNikge1xuICAgICAgdGVtcGxhdGUgPSB0ZW1wbGF0ZS5yZXBsYWNlKC9fcDYvZywgJ2InKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGVtcGxhdGUgPSB0ZW1wbGF0ZS5yZXBsYWNlKC9fcDYvZywgcGFyYW1fbGlzdFs2XSk7XG4gICAgfVxuXG4gICAgLy8gaWYgcGFyYW1fbGlzdC5sZW5ndGggbGVzcyB0aGF0IDUsIHJlbW92ZVxuICAgIC8vIHRoZSBleHRyYSBhcmdzIHRoYXQgd2lsbCBoYXZlIGhhcmRjb2RlZCB2YWx1ZVxuICAgIGlmIChwYXJhbV9saXN0Lmxlbmd0aCA8IDUpIHtcbiAgICAgIGFyZ3MgPSBhcmdzLnNsaWNlKDAsIGFyZ3MubGVuZ3RoIC0gKDUgLSBwYXJhbV9saXN0Lmxlbmd0aCkpXG4gICAgfVxuICAgIHRlbXBsYXRlID0gdGVtcGxhdGUucmVwbGFjZSgvX2FyZ3MvZywgYXJncy5qb2luKCcsJykpO1xuICAgIHRlbXBsYXRlID0gdGVtcGxhdGUucmVwbGFjZSgvX3BhcmFtcy9nLCBwYXJhbV9saXN0LnNwbGl0KCcnKS5qb2luKCcsJykpO1xuXG4gICAgcmV0dXJuIHRlbXBsYXRlO1xuICB9XG59KTtcbiIsIi8qISBodHRwOi8vcHJpc21qcy5jb20vZG93bmxvYWQuaHRtbD90aGVtZXM9cHJpc20tb2thaWRpYSZsYW5ndWFnZXM9Y2xpa2UramF2YXNjcmlwdCAqL1xudmFyIF9zZWxmID0gKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKVxuXHQ/IHdpbmRvdyAgIC8vIGlmIGluIGJyb3dzZXJcblx0OiAoXG5cdFx0KHR5cGVvZiBXb3JrZXJHbG9iYWxTY29wZSAhPT0gJ3VuZGVmaW5lZCcgJiYgc2VsZiBpbnN0YW5jZW9mIFdvcmtlckdsb2JhbFNjb3BlKVxuXHRcdD8gc2VsZiAvLyBpZiBpbiB3b3JrZXJcblx0XHQ6IHt9ICAgLy8gaWYgaW4gbm9kZSBqc1xuXHQpO1xuXG4vKipcbiAqIFByaXNtOiBMaWdodHdlaWdodCwgcm9idXN0LCBlbGVnYW50IHN5bnRheCBoaWdobGlnaHRpbmdcbiAqIE1JVCBsaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwL1xuICogQGF1dGhvciBMZWEgVmVyb3UgaHR0cDovL2xlYS52ZXJvdS5tZVxuICovXG5cbnZhciBQcmlzbSA9IChmdW5jdGlvbigpe1xuXG4vLyBQcml2YXRlIGhlbHBlciB2YXJzXG52YXIgbGFuZyA9IC9cXGJsYW5nKD86dWFnZSk/LShcXHcrKVxcYi9pO1xudmFyIHVuaXF1ZUlkID0gMDtcblxudmFyIF8gPSBfc2VsZi5QcmlzbSA9IHtcblx0dXRpbDoge1xuXHRcdGVuY29kZTogZnVuY3Rpb24gKHRva2Vucykge1xuXHRcdFx0aWYgKHRva2VucyBpbnN0YW5jZW9mIFRva2VuKSB7XG5cdFx0XHRcdHJldHVybiBuZXcgVG9rZW4odG9rZW5zLnR5cGUsIF8udXRpbC5lbmNvZGUodG9rZW5zLmNvbnRlbnQpLCB0b2tlbnMuYWxpYXMpO1xuXHRcdFx0fSBlbHNlIGlmIChfLnV0aWwudHlwZSh0b2tlbnMpID09PSAnQXJyYXknKSB7XG5cdFx0XHRcdHJldHVybiB0b2tlbnMubWFwKF8udXRpbC5lbmNvZGUpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIHRva2Vucy5yZXBsYWNlKC8mL2csICcmYW1wOycpLnJlcGxhY2UoLzwvZywgJyZsdDsnKS5yZXBsYWNlKC9cXHUwMGEwL2csICcgJyk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdHR5cGU6IGZ1bmN0aW9uIChvKSB7XG5cdFx0XHRyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLm1hdGNoKC9cXFtvYmplY3QgKFxcdyspXFxdLylbMV07XG5cdFx0fSxcblxuXHRcdG9iaklkOiBmdW5jdGlvbiAob2JqKSB7XG5cdFx0XHRpZiAoIW9ialsnX19pZCddKSB7XG5cdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosICdfX2lkJywgeyB2YWx1ZTogKyt1bmlxdWVJZCB9KTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBvYmpbJ19faWQnXTtcblx0XHR9LFxuXG5cdFx0Ly8gRGVlcCBjbG9uZSBhIGxhbmd1YWdlIGRlZmluaXRpb24gKGUuZy4gdG8gZXh0ZW5kIGl0KVxuXHRcdGNsb25lOiBmdW5jdGlvbiAobykge1xuXHRcdFx0dmFyIHR5cGUgPSBfLnV0aWwudHlwZShvKTtcblxuXHRcdFx0c3dpdGNoICh0eXBlKSB7XG5cdFx0XHRcdGNhc2UgJ09iamVjdCc6XG5cdFx0XHRcdFx0dmFyIGNsb25lID0ge307XG5cblx0XHRcdFx0XHRmb3IgKHZhciBrZXkgaW4gbykge1xuXHRcdFx0XHRcdFx0aWYgKG8uaGFzT3duUHJvcGVydHkoa2V5KSkge1xuXHRcdFx0XHRcdFx0XHRjbG9uZVtrZXldID0gXy51dGlsLmNsb25lKG9ba2V5XSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIGNsb25lO1xuXG5cdFx0XHRcdGNhc2UgJ0FycmF5Jzpcblx0XHRcdFx0XHQvLyBDaGVjayBmb3IgZXhpc3RlbmNlIGZvciBJRThcblx0XHRcdFx0XHRyZXR1cm4gby5tYXAgJiYgby5tYXAoZnVuY3Rpb24odikgeyByZXR1cm4gXy51dGlsLmNsb25lKHYpOyB9KTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG87XG5cdFx0fVxuXHR9LFxuXG5cdGxhbmd1YWdlczoge1xuXHRcdGV4dGVuZDogZnVuY3Rpb24gKGlkLCByZWRlZikge1xuXHRcdFx0dmFyIGxhbmcgPSBfLnV0aWwuY2xvbmUoXy5sYW5ndWFnZXNbaWRdKTtcblxuXHRcdFx0Zm9yICh2YXIga2V5IGluIHJlZGVmKSB7XG5cdFx0XHRcdGxhbmdba2V5XSA9IHJlZGVmW2tleV07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBsYW5nO1xuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBJbnNlcnQgYSB0b2tlbiBiZWZvcmUgYW5vdGhlciB0b2tlbiBpbiBhIGxhbmd1YWdlIGxpdGVyYWxcblx0XHQgKiBBcyB0aGlzIG5lZWRzIHRvIHJlY3JlYXRlIHRoZSBvYmplY3QgKHdlIGNhbm5vdCBhY3R1YWxseSBpbnNlcnQgYmVmb3JlIGtleXMgaW4gb2JqZWN0IGxpdGVyYWxzKSxcblx0XHQgKiB3ZSBjYW5ub3QganVzdCBwcm92aWRlIGFuIG9iamVjdCwgd2UgbmVlZCBhbm9iamVjdCBhbmQgYSBrZXkuXG5cdFx0ICogQHBhcmFtIGluc2lkZSBUaGUga2V5IChvciBsYW5ndWFnZSBpZCkgb2YgdGhlIHBhcmVudFxuXHRcdCAqIEBwYXJhbSBiZWZvcmUgVGhlIGtleSB0byBpbnNlcnQgYmVmb3JlLiBJZiBub3QgcHJvdmlkZWQsIHRoZSBmdW5jdGlvbiBhcHBlbmRzIGluc3RlYWQuXG5cdFx0ICogQHBhcmFtIGluc2VydCBPYmplY3Qgd2l0aCB0aGUga2V5L3ZhbHVlIHBhaXJzIHRvIGluc2VydFxuXHRcdCAqIEBwYXJhbSByb290IFRoZSBvYmplY3QgdGhhdCBjb250YWlucyBgaW5zaWRlYC4gSWYgZXF1YWwgdG8gUHJpc20ubGFuZ3VhZ2VzLCBpdCBjYW4gYmUgb21pdHRlZC5cblx0XHQgKi9cblx0XHRpbnNlcnRCZWZvcmU6IGZ1bmN0aW9uIChpbnNpZGUsIGJlZm9yZSwgaW5zZXJ0LCByb290KSB7XG5cdFx0XHRyb290ID0gcm9vdCB8fCBfLmxhbmd1YWdlcztcblx0XHRcdHZhciBncmFtbWFyID0gcm9vdFtpbnNpZGVdO1xuXG5cdFx0XHRpZiAoYXJndW1lbnRzLmxlbmd0aCA9PSAyKSB7XG5cdFx0XHRcdGluc2VydCA9IGFyZ3VtZW50c1sxXTtcblxuXHRcdFx0XHRmb3IgKHZhciBuZXdUb2tlbiBpbiBpbnNlcnQpIHtcblx0XHRcdFx0XHRpZiAoaW5zZXJ0Lmhhc093blByb3BlcnR5KG5ld1Rva2VuKSkge1xuXHRcdFx0XHRcdFx0Z3JhbW1hcltuZXdUb2tlbl0gPSBpbnNlcnRbbmV3VG9rZW5dO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBncmFtbWFyO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgcmV0ID0ge307XG5cblx0XHRcdGZvciAodmFyIHRva2VuIGluIGdyYW1tYXIpIHtcblxuXHRcdFx0XHRpZiAoZ3JhbW1hci5oYXNPd25Qcm9wZXJ0eSh0b2tlbikpIHtcblxuXHRcdFx0XHRcdGlmICh0b2tlbiA9PSBiZWZvcmUpIHtcblxuXHRcdFx0XHRcdFx0Zm9yICh2YXIgbmV3VG9rZW4gaW4gaW5zZXJ0KSB7XG5cblx0XHRcdFx0XHRcdFx0aWYgKGluc2VydC5oYXNPd25Qcm9wZXJ0eShuZXdUb2tlbikpIHtcblx0XHRcdFx0XHRcdFx0XHRyZXRbbmV3VG9rZW5dID0gaW5zZXJ0W25ld1Rva2VuXTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldFt0b2tlbl0gPSBncmFtbWFyW3Rva2VuXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBVcGRhdGUgcmVmZXJlbmNlcyBpbiBvdGhlciBsYW5ndWFnZSBkZWZpbml0aW9uc1xuXHRcdFx0Xy5sYW5ndWFnZXMuREZTKF8ubGFuZ3VhZ2VzLCBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG5cdFx0XHRcdGlmICh2YWx1ZSA9PT0gcm9vdFtpbnNpZGVdICYmIGtleSAhPSBpbnNpZGUpIHtcblx0XHRcdFx0XHR0aGlzW2tleV0gPSByZXQ7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHRyZXR1cm4gcm9vdFtpbnNpZGVdID0gcmV0O1xuXHRcdH0sXG5cblx0XHQvLyBUcmF2ZXJzZSBhIGxhbmd1YWdlIGRlZmluaXRpb24gd2l0aCBEZXB0aCBGaXJzdCBTZWFyY2hcblx0XHRERlM6IGZ1bmN0aW9uKG8sIGNhbGxiYWNrLCB0eXBlLCB2aXNpdGVkKSB7XG5cdFx0XHR2aXNpdGVkID0gdmlzaXRlZCB8fCB7fTtcblx0XHRcdGZvciAodmFyIGkgaW4gbykge1xuXHRcdFx0XHRpZiAoby5oYXNPd25Qcm9wZXJ0eShpKSkge1xuXHRcdFx0XHRcdGNhbGxiYWNrLmNhbGwobywgaSwgb1tpXSwgdHlwZSB8fCBpKTtcblxuXHRcdFx0XHRcdGlmIChfLnV0aWwudHlwZShvW2ldKSA9PT0gJ09iamVjdCcgJiYgIXZpc2l0ZWRbXy51dGlsLm9iaklkKG9baV0pXSkge1xuXHRcdFx0XHRcdFx0dmlzaXRlZFtfLnV0aWwub2JqSWQob1tpXSldID0gdHJ1ZTtcblx0XHRcdFx0XHRcdF8ubGFuZ3VhZ2VzLkRGUyhvW2ldLCBjYWxsYmFjaywgbnVsbCwgdmlzaXRlZCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGVsc2UgaWYgKF8udXRpbC50eXBlKG9baV0pID09PSAnQXJyYXknICYmICF2aXNpdGVkW18udXRpbC5vYmpJZChvW2ldKV0pIHtcblx0XHRcdFx0XHRcdHZpc2l0ZWRbXy51dGlsLm9iaklkKG9baV0pXSA9IHRydWU7XG5cdFx0XHRcdFx0XHRfLmxhbmd1YWdlcy5ERlMob1tpXSwgY2FsbGJhY2ssIGksIHZpc2l0ZWQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblx0cGx1Z2luczoge30sXG5cblx0aGlnaGxpZ2h0QWxsOiBmdW5jdGlvbihhc3luYywgY2FsbGJhY2spIHtcblx0XHR2YXIgZW52ID0ge1xuXHRcdFx0Y2FsbGJhY2s6IGNhbGxiYWNrLFxuXHRcdFx0c2VsZWN0b3I6ICdjb2RlW2NsYXNzKj1cImxhbmd1YWdlLVwiXSwgW2NsYXNzKj1cImxhbmd1YWdlLVwiXSBjb2RlLCBjb2RlW2NsYXNzKj1cImxhbmctXCJdLCBbY2xhc3MqPVwibGFuZy1cIl0gY29kZSdcblx0XHR9O1xuXG5cdFx0Xy5ob29rcy5ydW4oXCJiZWZvcmUtaGlnaGxpZ2h0YWxsXCIsIGVudik7XG5cblx0XHR2YXIgZWxlbWVudHMgPSBlbnYuZWxlbWVudHMgfHwgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChlbnYuc2VsZWN0b3IpO1xuXG5cdFx0Zm9yICh2YXIgaT0wLCBlbGVtZW50OyBlbGVtZW50ID0gZWxlbWVudHNbaSsrXTspIHtcblx0XHRcdF8uaGlnaGxpZ2h0RWxlbWVudChlbGVtZW50LCBhc3luYyA9PT0gdHJ1ZSwgZW52LmNhbGxiYWNrKTtcblx0XHR9XG5cdH0sXG5cblx0aGlnaGxpZ2h0RWxlbWVudDogZnVuY3Rpb24oZWxlbWVudCwgYXN5bmMsIGNhbGxiYWNrKSB7XG5cdFx0Ly8gRmluZCBsYW5ndWFnZVxuXHRcdHZhciBsYW5ndWFnZSwgZ3JhbW1hciwgcGFyZW50ID0gZWxlbWVudDtcblxuXHRcdHdoaWxlIChwYXJlbnQgJiYgIWxhbmcudGVzdChwYXJlbnQuY2xhc3NOYW1lKSkge1xuXHRcdFx0cGFyZW50ID0gcGFyZW50LnBhcmVudE5vZGU7XG5cdFx0fVxuXG5cdFx0aWYgKHBhcmVudCkge1xuXHRcdFx0bGFuZ3VhZ2UgPSAocGFyZW50LmNsYXNzTmFtZS5tYXRjaChsYW5nKSB8fCBbLCcnXSlbMV07XG5cdFx0XHRncmFtbWFyID0gXy5sYW5ndWFnZXNbbGFuZ3VhZ2VdO1xuXHRcdH1cblxuXHRcdC8vIFNldCBsYW5ndWFnZSBvbiB0aGUgZWxlbWVudCwgaWYgbm90IHByZXNlbnRcblx0XHRlbGVtZW50LmNsYXNzTmFtZSA9IGVsZW1lbnQuY2xhc3NOYW1lLnJlcGxhY2UobGFuZywgJycpLnJlcGxhY2UoL1xccysvZywgJyAnKSArICcgbGFuZ3VhZ2UtJyArIGxhbmd1YWdlO1xuXG5cdFx0Ly8gU2V0IGxhbmd1YWdlIG9uIHRoZSBwYXJlbnQsIGZvciBzdHlsaW5nXG5cdFx0cGFyZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xuXG5cdFx0aWYgKC9wcmUvaS50ZXN0KHBhcmVudC5ub2RlTmFtZSkpIHtcblx0XHRcdHBhcmVudC5jbGFzc05hbWUgPSBwYXJlbnQuY2xhc3NOYW1lLnJlcGxhY2UobGFuZywgJycpLnJlcGxhY2UoL1xccysvZywgJyAnKSArICcgbGFuZ3VhZ2UtJyArIGxhbmd1YWdlO1xuXHRcdH1cblxuXHRcdHZhciBjb2RlID0gZWxlbWVudC50ZXh0Q29udGVudDtcblxuXHRcdHZhciBlbnYgPSB7XG5cdFx0XHRlbGVtZW50OiBlbGVtZW50LFxuXHRcdFx0bGFuZ3VhZ2U6IGxhbmd1YWdlLFxuXHRcdFx0Z3JhbW1hcjogZ3JhbW1hcixcblx0XHRcdGNvZGU6IGNvZGVcblx0XHR9O1xuXG5cdFx0aWYgKCFjb2RlIHx8ICFncmFtbWFyKSB7XG5cdFx0XHRfLmhvb2tzLnJ1bignY29tcGxldGUnLCBlbnYpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdF8uaG9va3MucnVuKCdiZWZvcmUtaGlnaGxpZ2h0JywgZW52KTtcblxuXHRcdGlmIChhc3luYyAmJiBfc2VsZi5Xb3JrZXIpIHtcblx0XHRcdHZhciB3b3JrZXIgPSBuZXcgV29ya2VyKF8uZmlsZW5hbWUpO1xuXG5cdFx0XHR3b3JrZXIub25tZXNzYWdlID0gZnVuY3Rpb24oZXZ0KSB7XG5cdFx0XHRcdGVudi5oaWdobGlnaHRlZENvZGUgPSBldnQuZGF0YTtcblxuXHRcdFx0XHRfLmhvb2tzLnJ1bignYmVmb3JlLWluc2VydCcsIGVudik7XG5cblx0XHRcdFx0ZW52LmVsZW1lbnQuaW5uZXJIVE1MID0gZW52LmhpZ2hsaWdodGVkQ29kZTtcblxuXHRcdFx0XHRjYWxsYmFjayAmJiBjYWxsYmFjay5jYWxsKGVudi5lbGVtZW50KTtcblx0XHRcdFx0Xy5ob29rcy5ydW4oJ2FmdGVyLWhpZ2hsaWdodCcsIGVudik7XG5cdFx0XHRcdF8uaG9va3MucnVuKCdjb21wbGV0ZScsIGVudik7XG5cdFx0XHR9O1xuXG5cdFx0XHR3b3JrZXIucG9zdE1lc3NhZ2UoSlNPTi5zdHJpbmdpZnkoe1xuXHRcdFx0XHRsYW5ndWFnZTogZW52Lmxhbmd1YWdlLFxuXHRcdFx0XHRjb2RlOiBlbnYuY29kZSxcblx0XHRcdFx0aW1tZWRpYXRlQ2xvc2U6IHRydWVcblx0XHRcdH0pKTtcblx0XHR9XG5cdFx0ZWxzZSB7XG5cdFx0XHRlbnYuaGlnaGxpZ2h0ZWRDb2RlID0gXy5oaWdobGlnaHQoZW52LmNvZGUsIGVudi5ncmFtbWFyLCBlbnYubGFuZ3VhZ2UpO1xuXG5cdFx0XHRfLmhvb2tzLnJ1bignYmVmb3JlLWluc2VydCcsIGVudik7XG5cblx0XHRcdGVudi5lbGVtZW50LmlubmVySFRNTCA9IGVudi5oaWdobGlnaHRlZENvZGU7XG5cblx0XHRcdGNhbGxiYWNrICYmIGNhbGxiYWNrLmNhbGwoZWxlbWVudCk7XG5cblx0XHRcdF8uaG9va3MucnVuKCdhZnRlci1oaWdobGlnaHQnLCBlbnYpO1xuXHRcdFx0Xy5ob29rcy5ydW4oJ2NvbXBsZXRlJywgZW52KTtcblx0XHR9XG5cdH0sXG5cblx0aGlnaGxpZ2h0OiBmdW5jdGlvbiAodGV4dCwgZ3JhbW1hciwgbGFuZ3VhZ2UpIHtcblx0XHR2YXIgdG9rZW5zID0gXy50b2tlbml6ZSh0ZXh0LCBncmFtbWFyKTtcblx0XHRyZXR1cm4gVG9rZW4uc3RyaW5naWZ5KF8udXRpbC5lbmNvZGUodG9rZW5zKSwgbGFuZ3VhZ2UpO1xuXHR9LFxuXG5cdHRva2VuaXplOiBmdW5jdGlvbih0ZXh0LCBncmFtbWFyLCBsYW5ndWFnZSkge1xuXHRcdHZhciBUb2tlbiA9IF8uVG9rZW47XG5cblx0XHR2YXIgc3RyYXJyID0gW3RleHRdO1xuXG5cdFx0dmFyIHJlc3QgPSBncmFtbWFyLnJlc3Q7XG5cblx0XHRpZiAocmVzdCkge1xuXHRcdFx0Zm9yICh2YXIgdG9rZW4gaW4gcmVzdCkge1xuXHRcdFx0XHRncmFtbWFyW3Rva2VuXSA9IHJlc3RbdG9rZW5dO1xuXHRcdFx0fVxuXG5cdFx0XHRkZWxldGUgZ3JhbW1hci5yZXN0O1xuXHRcdH1cblxuXHRcdHRva2VubG9vcDogZm9yICh2YXIgdG9rZW4gaW4gZ3JhbW1hcikge1xuXHRcdFx0aWYoIWdyYW1tYXIuaGFzT3duUHJvcGVydHkodG9rZW4pIHx8ICFncmFtbWFyW3Rva2VuXSkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0dmFyIHBhdHRlcm5zID0gZ3JhbW1hclt0b2tlbl07XG5cdFx0XHRwYXR0ZXJucyA9IChfLnV0aWwudHlwZShwYXR0ZXJucykgPT09IFwiQXJyYXlcIikgPyBwYXR0ZXJucyA6IFtwYXR0ZXJuc107XG5cblx0XHRcdGZvciAodmFyIGogPSAwOyBqIDwgcGF0dGVybnMubGVuZ3RoOyArK2opIHtcblx0XHRcdFx0dmFyIHBhdHRlcm4gPSBwYXR0ZXJuc1tqXSxcblx0XHRcdFx0XHRpbnNpZGUgPSBwYXR0ZXJuLmluc2lkZSxcblx0XHRcdFx0XHRsb29rYmVoaW5kID0gISFwYXR0ZXJuLmxvb2tiZWhpbmQsXG5cdFx0XHRcdFx0Z3JlZWR5ID0gISFwYXR0ZXJuLmdyZWVkeSxcblx0XHRcdFx0XHRsb29rYmVoaW5kTGVuZ3RoID0gMCxcblx0XHRcdFx0XHRhbGlhcyA9IHBhdHRlcm4uYWxpYXM7XG5cblx0XHRcdFx0cGF0dGVybiA9IHBhdHRlcm4ucGF0dGVybiB8fCBwYXR0ZXJuO1xuXG5cdFx0XHRcdGZvciAodmFyIGk9MDsgaTxzdHJhcnIubGVuZ3RoOyBpKyspIHsgLy8gRG9u4oCZdCBjYWNoZSBsZW5ndGggYXMgaXQgY2hhbmdlcyBkdXJpbmcgdGhlIGxvb3BcblxuXHRcdFx0XHRcdHZhciBzdHIgPSBzdHJhcnJbaV07XG5cblx0XHRcdFx0XHRpZiAoc3RyYXJyLmxlbmd0aCA+IHRleHQubGVuZ3RoKSB7XG5cdFx0XHRcdFx0XHQvLyBTb21ldGhpbmcgd2VudCB0ZXJyaWJseSB3cm9uZywgQUJPUlQsIEFCT1JUIVxuXHRcdFx0XHRcdFx0YnJlYWsgdG9rZW5sb29wO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmIChzdHIgaW5zdGFuY2VvZiBUb2tlbikge1xuXHRcdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cGF0dGVybi5sYXN0SW5kZXggPSAwO1xuXG5cdFx0XHRcdFx0dmFyIG1hdGNoID0gcGF0dGVybi5leGVjKHN0ciksXG5cdFx0XHRcdFx0ICAgIGRlbE51bSA9IDE7XG5cblx0XHRcdFx0XHQvLyBHcmVlZHkgcGF0dGVybnMgY2FuIG92ZXJyaWRlL3JlbW92ZSB1cCB0byB0d28gcHJldmlvdXNseSBtYXRjaGVkIHRva2Vuc1xuXHRcdFx0XHRcdGlmICghbWF0Y2ggJiYgZ3JlZWR5ICYmIGkgIT0gc3RyYXJyLmxlbmd0aCAtIDEpIHtcblx0XHRcdFx0XHRcdC8vIFJlY29uc3RydWN0IHRoZSBvcmlnaW5hbCB0ZXh0IHVzaW5nIHRoZSBuZXh0IHR3byB0b2tlbnNcblx0XHRcdFx0XHRcdHZhciBuZXh0VG9rZW4gPSBzdHJhcnJbaSArIDFdLm1hdGNoZWRTdHIgfHwgc3RyYXJyW2kgKyAxXSxcblx0XHRcdFx0XHRcdCAgICBjb21iU3RyID0gc3RyICsgbmV4dFRva2VuO1xuXG5cdFx0XHRcdFx0XHRpZiAoaSA8IHN0cmFyci5sZW5ndGggLSAyKSB7XG5cdFx0XHRcdFx0XHRcdGNvbWJTdHIgKz0gc3RyYXJyW2kgKyAyXS5tYXRjaGVkU3RyIHx8IHN0cmFycltpICsgMl07XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIFRyeSB0aGUgcGF0dGVybiBhZ2FpbiBvbiB0aGUgcmVjb25zdHJ1Y3RlZCB0ZXh0XG5cdFx0XHRcdFx0XHRwYXR0ZXJuLmxhc3RJbmRleCA9IDA7XG5cdFx0XHRcdFx0XHRtYXRjaCA9IHBhdHRlcm4uZXhlYyhjb21iU3RyKTtcblx0XHRcdFx0XHRcdGlmICghbWF0Y2gpIHtcblx0XHRcdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHZhciBmcm9tID0gbWF0Y2guaW5kZXggKyAobG9va2JlaGluZCA/IG1hdGNoWzFdLmxlbmd0aCA6IDApO1xuXHRcdFx0XHRcdFx0Ly8gVG8gYmUgYSB2YWxpZCBjYW5kaWRhdGUsIHRoZSBuZXcgbWF0Y2ggaGFzIHRvIHN0YXJ0IGluc2lkZSBvZiBzdHJcblx0XHRcdFx0XHRcdGlmIChmcm9tID49IHN0ci5sZW5ndGgpIHtcblx0XHRcdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR2YXIgdG8gPSBtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aCxcblx0XHRcdFx0XHRcdCAgICBsZW4gPSBzdHIubGVuZ3RoICsgbmV4dFRva2VuLmxlbmd0aDtcblxuXHRcdFx0XHRcdFx0Ly8gTnVtYmVyIG9mIHRva2VucyB0byBkZWxldGUgYW5kIHJlcGxhY2Ugd2l0aCB0aGUgbmV3IG1hdGNoXG5cdFx0XHRcdFx0XHRkZWxOdW0gPSAzO1xuXG5cdFx0XHRcdFx0XHRpZiAodG8gPD0gbGVuKSB7XG5cdFx0XHRcdFx0XHRcdGRlbE51bSA9IDI7XG5cdFx0XHRcdFx0XHRcdGNvbWJTdHIgPSBjb21iU3RyLnNsaWNlKDAsIGxlbik7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRzdHIgPSBjb21iU3RyO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmICghbWF0Y2gpIHtcblx0XHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmKGxvb2tiZWhpbmQpIHtcblx0XHRcdFx0XHRcdGxvb2tiZWhpbmRMZW5ndGggPSBtYXRjaFsxXS5sZW5ndGg7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0dmFyIGZyb20gPSBtYXRjaC5pbmRleCArIGxvb2tiZWhpbmRMZW5ndGgsXG5cdFx0XHRcdFx0ICAgIG1hdGNoID0gbWF0Y2hbMF0uc2xpY2UobG9va2JlaGluZExlbmd0aCksXG5cdFx0XHRcdFx0ICAgIHRvID0gZnJvbSArIG1hdGNoLmxlbmd0aCxcblx0XHRcdFx0XHQgICAgYmVmb3JlID0gc3RyLnNsaWNlKDAsIGZyb20pLFxuXHRcdFx0XHRcdCAgICBhZnRlciA9IHN0ci5zbGljZSh0byk7XG5cblx0XHRcdFx0XHR2YXIgYXJncyA9IFtpLCBkZWxOdW1dO1xuXG5cdFx0XHRcdFx0aWYgKGJlZm9yZSkge1xuXHRcdFx0XHRcdFx0YXJncy5wdXNoKGJlZm9yZSk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0dmFyIHdyYXBwZWQgPSBuZXcgVG9rZW4odG9rZW4sIGluc2lkZT8gXy50b2tlbml6ZShtYXRjaCwgaW5zaWRlKSA6IG1hdGNoLCBhbGlhcywgbWF0Y2gpO1xuXG5cdFx0XHRcdFx0YXJncy5wdXNoKHdyYXBwZWQpO1xuXG5cdFx0XHRcdFx0aWYgKGFmdGVyKSB7XG5cdFx0XHRcdFx0XHRhcmdzLnB1c2goYWZ0ZXIpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdEFycmF5LnByb3RvdHlwZS5zcGxpY2UuYXBwbHkoc3RyYXJyLCBhcmdzKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBzdHJhcnI7XG5cdH0sXG5cblx0aG9va3M6IHtcblx0XHRhbGw6IHt9LFxuXG5cdFx0YWRkOiBmdW5jdGlvbiAobmFtZSwgY2FsbGJhY2spIHtcblx0XHRcdHZhciBob29rcyA9IF8uaG9va3MuYWxsO1xuXG5cdFx0XHRob29rc1tuYW1lXSA9IGhvb2tzW25hbWVdIHx8IFtdO1xuXG5cdFx0XHRob29rc1tuYW1lXS5wdXNoKGNhbGxiYWNrKTtcblx0XHR9LFxuXG5cdFx0cnVuOiBmdW5jdGlvbiAobmFtZSwgZW52KSB7XG5cdFx0XHR2YXIgY2FsbGJhY2tzID0gXy5ob29rcy5hbGxbbmFtZV07XG5cblx0XHRcdGlmICghY2FsbGJhY2tzIHx8ICFjYWxsYmFja3MubGVuZ3RoKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Zm9yICh2YXIgaT0wLCBjYWxsYmFjazsgY2FsbGJhY2sgPSBjYWxsYmFja3NbaSsrXTspIHtcblx0XHRcdFx0Y2FsbGJhY2soZW52KTtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5cbnZhciBUb2tlbiA9IF8uVG9rZW4gPSBmdW5jdGlvbih0eXBlLCBjb250ZW50LCBhbGlhcywgbWF0Y2hlZFN0cikge1xuXHR0aGlzLnR5cGUgPSB0eXBlO1xuXHR0aGlzLmNvbnRlbnQgPSBjb250ZW50O1xuXHR0aGlzLmFsaWFzID0gYWxpYXM7XG5cdC8vIENvcHkgb2YgdGhlIGZ1bGwgc3RyaW5nIHRoaXMgdG9rZW4gd2FzIGNyZWF0ZWQgZnJvbVxuXHR0aGlzLm1hdGNoZWRTdHIgPSBtYXRjaGVkU3RyIHx8IG51bGw7XG59O1xuXG5Ub2tlbi5zdHJpbmdpZnkgPSBmdW5jdGlvbihvLCBsYW5ndWFnZSwgcGFyZW50KSB7XG5cdGlmICh0eXBlb2YgbyA9PSAnc3RyaW5nJykge1xuXHRcdHJldHVybiBvO1xuXHR9XG5cblx0aWYgKF8udXRpbC50eXBlKG8pID09PSAnQXJyYXknKSB7XG5cdFx0cmV0dXJuIG8ubWFwKGZ1bmN0aW9uKGVsZW1lbnQpIHtcblx0XHRcdHJldHVybiBUb2tlbi5zdHJpbmdpZnkoZWxlbWVudCwgbGFuZ3VhZ2UsIG8pO1xuXHRcdH0pLmpvaW4oJycpO1xuXHR9XG5cblx0dmFyIGVudiA9IHtcblx0XHR0eXBlOiBvLnR5cGUsXG5cdFx0Y29udGVudDogVG9rZW4uc3RyaW5naWZ5KG8uY29udGVudCwgbGFuZ3VhZ2UsIHBhcmVudCksXG5cdFx0dGFnOiAnc3BhbicsXG5cdFx0Y2xhc3NlczogWyd0b2tlbicsIG8udHlwZV0sXG5cdFx0YXR0cmlidXRlczoge30sXG5cdFx0bGFuZ3VhZ2U6IGxhbmd1YWdlLFxuXHRcdHBhcmVudDogcGFyZW50XG5cdH07XG5cblx0aWYgKGVudi50eXBlID09ICdjb21tZW50Jykge1xuXHRcdGVudi5hdHRyaWJ1dGVzWydzcGVsbGNoZWNrJ10gPSAndHJ1ZSc7XG5cdH1cblxuXHRpZiAoby5hbGlhcykge1xuXHRcdHZhciBhbGlhc2VzID0gXy51dGlsLnR5cGUoby5hbGlhcykgPT09ICdBcnJheScgPyBvLmFsaWFzIDogW28uYWxpYXNdO1xuXHRcdEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KGVudi5jbGFzc2VzLCBhbGlhc2VzKTtcblx0fVxuXG5cdF8uaG9va3MucnVuKCd3cmFwJywgZW52KTtcblxuXHR2YXIgYXR0cmlidXRlcyA9ICcnO1xuXG5cdGZvciAodmFyIG5hbWUgaW4gZW52LmF0dHJpYnV0ZXMpIHtcblx0XHRhdHRyaWJ1dGVzICs9IChhdHRyaWJ1dGVzID8gJyAnIDogJycpICsgbmFtZSArICc9XCInICsgKGVudi5hdHRyaWJ1dGVzW25hbWVdIHx8ICcnKSArICdcIic7XG5cdH1cblxuXHRyZXR1cm4gJzwnICsgZW52LnRhZyArICcgY2xhc3M9XCInICsgZW52LmNsYXNzZXMuam9pbignICcpICsgJ1wiICcgKyBhdHRyaWJ1dGVzICsgJz4nICsgZW52LmNvbnRlbnQgKyAnPC8nICsgZW52LnRhZyArICc+JztcblxufTtcblxuaWYgKCFfc2VsZi5kb2N1bWVudCkge1xuXHRpZiAoIV9zZWxmLmFkZEV2ZW50TGlzdGVuZXIpIHtcblx0XHQvLyBpbiBOb2RlLmpzXG5cdFx0cmV0dXJuIF9zZWxmLlByaXNtO1xuXHR9XG4gXHQvLyBJbiB3b3JrZXJcblx0X3NlbGYuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGZ1bmN0aW9uKGV2dCkge1xuXHRcdHZhciBtZXNzYWdlID0gSlNPTi5wYXJzZShldnQuZGF0YSksXG5cdFx0ICAgIGxhbmcgPSBtZXNzYWdlLmxhbmd1YWdlLFxuXHRcdCAgICBjb2RlID0gbWVzc2FnZS5jb2RlLFxuXHRcdCAgICBpbW1lZGlhdGVDbG9zZSA9IG1lc3NhZ2UuaW1tZWRpYXRlQ2xvc2U7XG5cblx0XHRfc2VsZi5wb3N0TWVzc2FnZShfLmhpZ2hsaWdodChjb2RlLCBfLmxhbmd1YWdlc1tsYW5nXSwgbGFuZykpO1xuXHRcdGlmIChpbW1lZGlhdGVDbG9zZSkge1xuXHRcdFx0X3NlbGYuY2xvc2UoKTtcblx0XHR9XG5cdH0sIGZhbHNlKTtcblxuXHRyZXR1cm4gX3NlbGYuUHJpc207XG59XG5cbi8vR2V0IGN1cnJlbnQgc2NyaXB0IGFuZCBoaWdobGlnaHRcbnZhciBzY3JpcHQgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0IHx8IFtdLnNsaWNlLmNhbGwoZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIikpLnBvcCgpO1xuXG5pZiAoc2NyaXB0KSB7XG5cdF8uZmlsZW5hbWUgPSBzY3JpcHQuc3JjO1xuXG5cdGlmIChkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyICYmICFzY3JpcHQuaGFzQXR0cmlidXRlKCdkYXRhLW1hbnVhbCcpKSB7XG5cdFx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIF8uaGlnaGxpZ2h0QWxsKTtcblx0fVxufVxuXG5yZXR1cm4gX3NlbGYuUHJpc207XG5cbn0pKCk7XG5cbmlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuXHRtb2R1bGUuZXhwb3J0cyA9IFByaXNtO1xufVxuXG4vLyBoYWNrIGZvciBjb21wb25lbnRzIHRvIHdvcmsgY29ycmVjdGx5IGluIG5vZGUuanNcbmlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xuXHRnbG9iYWwuUHJpc20gPSBQcmlzbTtcbn1cbjtcblByaXNtLmxhbmd1YWdlcy5jbGlrZSA9IHtcblx0J2NvbW1lbnQnOiBbXG5cdFx0e1xuXHRcdFx0cGF0dGVybjogLyhefFteXFxcXF0pXFwvXFwqW1xcd1xcV10qP1xcKlxcLy8sXG5cdFx0XHRsb29rYmVoaW5kOiB0cnVlXG5cdFx0fSxcblx0XHR7XG5cdFx0XHRwYXR0ZXJuOiAvKF58W15cXFxcOl0pXFwvXFwvLiovLFxuXHRcdFx0bG9va2JlaGluZDogdHJ1ZVxuXHRcdH1cblx0XSxcblx0J3N0cmluZyc6IHtcblx0XHRwYXR0ZXJuOiAvKFtcIiddKShcXFxcKD86XFxyXFxufFtcXHNcXFNdKXwoPyFcXDEpW15cXFxcXFxyXFxuXSkqXFwxLyxcblx0XHRncmVlZHk6IHRydWVcblx0fSxcblx0J2NsYXNzLW5hbWUnOiB7XG5cdFx0cGF0dGVybjogLygoPzpcXGIoPzpjbGFzc3xpbnRlcmZhY2V8ZXh0ZW5kc3xpbXBsZW1lbnRzfHRyYWl0fGluc3RhbmNlb2Z8bmV3KVxccyspfCg/OmNhdGNoXFxzK1xcKCkpW2EtejAtOV9cXC5cXFxcXSsvaSxcblx0XHRsb29rYmVoaW5kOiB0cnVlLFxuXHRcdGluc2lkZToge1xuXHRcdFx0cHVuY3R1YXRpb246IC8oXFwufFxcXFwpL1xuXHRcdH1cblx0fSxcblx0J2tleXdvcmQnOiAvXFxiKGlmfGVsc2V8d2hpbGV8ZG98Zm9yfHJldHVybnxpbnxpbnN0YW5jZW9mfGZ1bmN0aW9ufG5ld3x0cnl8dGhyb3d8Y2F0Y2h8ZmluYWxseXxudWxsfGJyZWFrfGNvbnRpbnVlKVxcYi8sXG5cdCdib29sZWFuJzogL1xcYih0cnVlfGZhbHNlKVxcYi8sXG5cdCdmdW5jdGlvbic6IC9bYS16MC05X10rKD89XFwoKS9pLFxuXHQnbnVtYmVyJzogL1xcYi0/KD86MHhbXFxkYS1mXSt8XFxkKlxcLj9cXGQrKD86ZVsrLV0/XFxkKyk/KVxcYi9pLFxuXHQnb3BlcmF0b3InOiAvLS0/fFxcK1xcKz98IT0/PT98PD0/fD49P3w9PT89P3wmJj98XFx8XFx8P3xcXD98XFwqfFxcL3x+fFxcXnwlLyxcblx0J3B1bmN0dWF0aW9uJzogL1t7fVtcXF07KCksLjpdL1xufTtcblxuUHJpc20ubGFuZ3VhZ2VzLmphdmFzY3JpcHQgPSBQcmlzbS5sYW5ndWFnZXMuZXh0ZW5kKCdjbGlrZScsIHtcblx0J2tleXdvcmQnOiAvXFxiKGFzfGFzeW5jfGF3YWl0fGJyZWFrfGNhc2V8Y2F0Y2h8Y2xhc3N8Y29uc3R8Y29udGludWV8ZGVidWdnZXJ8ZGVmYXVsdHxkZWxldGV8ZG98ZWxzZXxlbnVtfGV4cG9ydHxleHRlbmRzfGZpbmFsbHl8Zm9yfGZyb218ZnVuY3Rpb258Z2V0fGlmfGltcGxlbWVudHN8aW1wb3J0fGlufGluc3RhbmNlb2Z8aW50ZXJmYWNlfGxldHxuZXd8bnVsbHxvZnxwYWNrYWdlfHByaXZhdGV8cHJvdGVjdGVkfHB1YmxpY3xyZXR1cm58c2V0fHN0YXRpY3xzdXBlcnxzd2l0Y2h8dGhpc3x0aHJvd3x0cnl8dHlwZW9mfHZhcnx2b2lkfHdoaWxlfHdpdGh8eWllbGQpXFxiLyxcblx0J251bWJlcic6IC9cXGItPygweFtcXGRBLUZhLWZdK3wwYlswMV0rfDBvWzAtN10rfFxcZCpcXC4/XFxkKyhbRWVdWystXT9cXGQrKT98TmFOfEluZmluaXR5KVxcYi8sXG5cdC8vIEFsbG93IGZvciBhbGwgbm9uLUFTQ0lJIGNoYXJhY3RlcnMgKFNlZSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yMDA4NDQ0KVxuXHQnZnVuY3Rpb24nOiAvW18kYS16QS1aXFx4QTAtXFx1RkZGRl1bXyRhLXpBLVowLTlcXHhBMC1cXHVGRkZGXSooPz1cXCgpL2lcbn0pO1xuXG5QcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKCdqYXZhc2NyaXB0JywgJ2tleXdvcmQnLCB7XG5cdCdyZWdleCc6IHtcblx0XHRwYXR0ZXJuOiAvKF58W14vXSlcXC8oPyFcXC8pKFxcWy4rP118XFxcXC58W14vXFxcXFxcclxcbl0pK1xcL1tnaW15dV17MCw1fSg/PVxccyooJHxbXFxyXFxuLC47fSldKSkvLFxuXHRcdGxvb2tiZWhpbmQ6IHRydWUsXG5cdFx0Z3JlZWR5OiB0cnVlXG5cdH1cbn0pO1xuXG5QcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKCdqYXZhc2NyaXB0JywgJ2NsYXNzLW5hbWUnLCB7XG5cdCd0ZW1wbGF0ZS1zdHJpbmcnOiB7XG5cdFx0cGF0dGVybjogL2AoPzpcXFxcXFxcXHxcXFxcP1teXFxcXF0pKj9gLyxcblx0XHRpbnNpZGU6IHtcblx0XHRcdCdpbnRlcnBvbGF0aW9uJzoge1xuXHRcdFx0XHRwYXR0ZXJuOiAvXFwkXFx7W159XStcXH0vLFxuXHRcdFx0XHRpbnNpZGU6IHtcblx0XHRcdFx0XHQnaW50ZXJwb2xhdGlvbi1wdW5jdHVhdGlvbic6IHtcblx0XHRcdFx0XHRcdHBhdHRlcm46IC9eXFwkXFx7fFxcfSQvLFxuXHRcdFx0XHRcdFx0YWxpYXM6ICdwdW5jdHVhdGlvbidcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdHJlc3Q6IFByaXNtLmxhbmd1YWdlcy5qYXZhc2NyaXB0XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHQnc3RyaW5nJzogL1tcXHNcXFNdKy9cblx0XHR9XG5cdH1cbn0pO1xuXG5pZiAoUHJpc20ubGFuZ3VhZ2VzLm1hcmt1cCkge1xuXHRQcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKCdtYXJrdXAnLCAndGFnJywge1xuXHRcdCdzY3JpcHQnOiB7XG5cdFx0XHRwYXR0ZXJuOiAvKDxzY3JpcHRbXFx3XFxXXSo/PilbXFx3XFxXXSo/KD89PFxcL3NjcmlwdD4pL2ksXG5cdFx0XHRsb29rYmVoaW5kOiB0cnVlLFxuXHRcdFx0aW5zaWRlOiBQcmlzbS5sYW5ndWFnZXMuamF2YXNjcmlwdCxcblx0XHRcdGFsaWFzOiAnbGFuZ3VhZ2UtamF2YXNjcmlwdCdcblx0XHR9XG5cdH0pO1xufVxuXG5QcmlzbS5sYW5ndWFnZXMuanMgPSBQcmlzbS5sYW5ndWFnZXMuamF2YXNjcmlwdDtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
